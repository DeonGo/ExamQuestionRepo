package com.deongao.examquestionrepo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.deongao.examquestionrepo.model.ExamQuestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_QUESTION".
*/
public class ExamQuestionDao extends AbstractDao<ExamQuestion, Long> {

    public static final String TABLENAME = "EXAM_QUESTION";

    /**
     * Properties of entity ExamQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property AnswerA = new Property(3, String.class, "answerA", false, "ANSWER_A");
        public final static Property AnswerB = new Property(4, String.class, "answerB", false, "ANSWER_B");
        public final static Property AnswerC = new Property(5, String.class, "answerC", false, "ANSWER_C");
        public final static Property AnswerD = new Property(6, String.class, "answerD", false, "ANSWER_D");
        public final static Property RealAnswer = new Property(7, String.class, "realAnswer", false, "REAL_ANSWER");
    };


    public ExamQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public ExamQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"ANSWER_A\" TEXT," + // 3: answerA
                "\"ANSWER_B\" TEXT," + // 4: answerB
                "\"ANSWER_C\" TEXT," + // 5: answerC
                "\"ANSWER_D\" TEXT," + // 6: answerD
                "\"REAL_ANSWER\" TEXT);"); // 7: realAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamQuestion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getType());
 
        String answerA = entity.getAnswerA();
        if (answerA != null) {
            stmt.bindString(4, answerA);
        }
 
        String answerB = entity.getAnswerB();
        if (answerB != null) {
            stmt.bindString(5, answerB);
        }
 
        String answerC = entity.getAnswerC();
        if (answerC != null) {
            stmt.bindString(6, answerC);
        }
 
        String answerD = entity.getAnswerD();
        if (answerD != null) {
            stmt.bindString(7, answerD);
        }
 
        String realAnswer = entity.getRealAnswer();
        if (realAnswer != null) {
            stmt.bindString(8, realAnswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamQuestion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getType());
 
        String answerA = entity.getAnswerA();
        if (answerA != null) {
            stmt.bindString(4, answerA);
        }
 
        String answerB = entity.getAnswerB();
        if (answerB != null) {
            stmt.bindString(5, answerB);
        }
 
        String answerC = entity.getAnswerC();
        if (answerC != null) {
            stmt.bindString(6, answerC);
        }
 
        String answerD = entity.getAnswerD();
        if (answerD != null) {
            stmt.bindString(7, answerD);
        }
 
        String realAnswer = entity.getRealAnswer();
        if (realAnswer != null) {
            stmt.bindString(8, realAnswer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExamQuestion readEntity(Cursor cursor, int offset) {
        ExamQuestion entity = new ExamQuestion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answerA
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // answerB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answerC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answerD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // realAnswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamQuestion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setAnswerA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswerB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswerC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswerD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRealAnswer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExamQuestion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExamQuestion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
